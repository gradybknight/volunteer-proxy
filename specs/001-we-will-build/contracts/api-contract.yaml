openapi: 3.1.0
info:
  title: Volunteer-Proxy Matching System API
  version: 1.0.0
  description: API for managing volunteer-proxy matching for youth sports events

servers:
  - url: http://localhost:3000/api
    description: Local development server
  - url: https://api.volunteer-proxy.example.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRole:
      type: string
      enum: [admin, volunteer, proxy]

    User:
      type: object
      required: [id, email, role, firstName, lastName, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          $ref: '#/components/schemas/UserRole'
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Event:
      type: object
      required: [id, title, description, date, startTime, endTime, location, createdById, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
        date:
          type: string
          format: date
        startTime:
          type: string
          pattern: '^([0-1][0-9]|2[0-3]):[0-5][0-9]$'
          example: "14:30"
        endTime:
          type: string
          pattern: '^([0-1][0-9]|2[0-3]):[0-5][0-9]$'
          example: "16:30"
        location:
          type: string
          minLength: 1
        createdById:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    VolunteerAssignment:
      type: object
      required: [id, volunteerId, eventId, fulfilled, assignedAt]
      properties:
        id:
          type: string
          format: uuid
        volunteerId:
          type: string
          format: uuid
        eventId:
          type: string
          format: uuid
        fulfilled:
          type: boolean
        assignedAt:
          type: string
          format: date-time
        fulfilledAt:
          type: string
          format: date-time
          nullable: true

    ProxyAvailability:
      type: object
      required: [id, proxyId, eventId, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        proxyId:
          type: string
          format: uuid
        eventId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    RequestStatus:
      type: string
      enum: [pending, accepted, declined]

    Request:
      type: object
      required: [id, volunteerId, proxyId, eventId, status, volunteerAssignmentId, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        volunteerId:
          type: string
          format: uuid
        proxyId:
          type: string
          format: uuid
        eventId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/RequestStatus'
        volunteerAssignmentId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        respondedAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time

    NotificationType:
      type: string
      enum: [request_received, request_accepted, request_declined]

    Notification:
      type: object
      required: [id, userId, type, message, read, createdAt]
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/NotificationType'
        message:
          type: string
          minLength: 1
        relatedRequestId:
          type: string
          format: uuid
          nullable: true
        read:
          type: boolean
        createdAt:
          type: string
          format: date-time

    Error:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true

    CreateEventRequest:
      type: object
      required: [title, description, date, startTime, endTime, location]
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
        date:
          type: string
          format: date
        startTime:
          type: string
          pattern: '^([0-1][0-9]|2[0-3]):[0-5][0-9]$'
        endTime:
          type: string
          pattern: '^([0-1][0-9]|2[0-3]):[0-5][0-9]$'
        location:
          type: string
          minLength: 1

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8

    LoginResponse:
      type: object
      required: [token, user]
      properties:
        token:
          type: string
          description: JWT access token
        user:
          $ref: '#/components/schemas/User'

    RegisterRequest:
      type: object
      required: [email, password, role, firstName, lastName]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        role:
          $ref: '#/components/schemas/UserRole'
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1

paths:
  # Authentication
  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Login with email and password
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Events
  /events:
    get:
      summary: List all events
      tags: [Events]
      security:
        - bearerAuth: []
      parameters:
        - name: date
          in: query
          schema:
            type: string
            format: date
          description: Filter events by date
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create a new event (admin only)
      tags: [Events]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/BadRequest'

  /events/{eventId}:
    get:
      summary: Get event by ID
      tags: [Events]
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Volunteer Assignments
  /volunteer-assignments:
    get:
      summary: List volunteer assignments for current user
      tags: [Volunteer Assignments]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of assignments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VolunteerAssignment'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Proxy Availability
  /proxy-availability:
    get:
      summary: List proxy availability (filtered by event or proxy)
      tags: [Proxy Availability]
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: query
          schema:
            type: string
            format: uuid
        - name: proxyId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of availability records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProxyAvailability'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Mark availability for an event (proxy only)
      tags: [Proxy Availability]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [eventId]
              properties:
                eventId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Availability marked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyAvailability'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Conflict - already available or time conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /proxy-availability/{availabilityId}:
    delete:
      summary: Remove availability (proxy only)
      tags: [Proxy Availability]
      security:
        - bearerAuth: []
      parameters:
        - name: availabilityId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Availability removed
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Requests
  /requests:
    get:
      summary: List requests (filtered by volunteer or proxy)
      tags: [Requests]
      security:
        - bearerAuth: []
      parameters:
        - name: volunteerId
          in: query
          schema:
            type: string
            format: uuid
        - name: proxyId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/RequestStatus'
      responses:
        '200':
          description: List of requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Send a request to a proxy (volunteer only)
      tags: [Requests]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [proxyId, eventId, volunteerAssignmentId]
              properties:
                proxyId:
                  type: string
                  format: uuid
                eventId:
                  type: string
                  format: uuid
                volunteerAssignmentId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Request sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Proxy not available for event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - request already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /requests/{requestId}/accept:
    post:
      summary: Accept a request (proxy only)
      tags: [Requests]
      security:
        - bearerAuth: []
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Conflict - time slot conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /requests/{requestId}/decline:
    post:
      summary: Decline a request (proxy only)
      tags: [Requests]
      security:
        - bearerAuth: []
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request declined
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Notifications
  /notifications:
    get:
      summary: List notifications for current user
      tags: [Notifications]
      security:
        - bearerAuth: []
      parameters:
        - name: unread
          in: query
          schema:
            type: boolean
          description: Filter to only unread notifications
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /notifications/{notificationId}/read:
    post:
      summary: Mark notification as read
      tags: [Notifications]
      security:
        - bearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Users
  /users/me:
    get:
      summary: Get current user profile
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: Authentication
    description: User authentication and registration
  - name: Events
    description: Event management
  - name: Volunteer Assignments
    description: Volunteer assignment tracking
  - name: Proxy Availability
    description: Proxy availability management
  - name: Requests
    description: Volunteer-proxy request workflow
  - name: Notifications
    description: User notifications
  - name: Users
    description: User profile management
